@model ProductVM
@{
    ViewData["Title"] = "Productdetails";
}
  @await Component.InvokeAsync("Banner",new { Title = "Single Product" })

    <!-- Testimonial slider starts -->
    <section class="testimonial-slider-product-detail">

        <div class="container">
            <div class="row justify-content-center">
                <div class="col-lg-12">
                    <div class="owl-carousel">
                        <div class="item">

                            <div class="slide-img">
                                <img src="images/xsingle_product.png.pagespeed.ic.zdTtvLLsqx.webp" alt="">
                            </div>


                        </div>

                        <div class="item">

                            <div class="slide-img">
                                <img src="images/xsingle_product.png.pagespeed.ic.zdTtvLLsqx.webp" alt="">
                            </div>


                        </div>

                        <div class="item">
                            <div class="slide-img">
                                <img src="images/xsingle_product.png.pagespeed.ic.zdTtvLLsqx.webp" alt="">
                            </div>



                        </div>


                    </div>
                    <div class="product-detail text-center">
                        <h3>
                            Foam filling cotton slow <br> rebound pillows
                        </h3>
                        <p>
                            Seamlessly empower fully researched growth strategies and interoperable internal or “organic” sources. Credibly innovate granular internal or “organic” sources whereas high standards in web-readiness. Credibly innovate granular internal or organic sources
                            whereas high standards in web-readiness. Energistically scale future-proof core competencies vis-a-vis impactful experiences. Dramatically synthesize integrated schemas. with optimal networks.
                        </p>

                        <div class="product-add-to-card">
                            <div class="product-quantity">
                                <p>Quantity</p>
                                <div class="product-count d-inline-block">
                                    <span class="product-count-item number-decrement"> <i class="fas fa-minus"></i></span>
                                    <input class="product-count-item input-number" type="text" value="1" min="0" max="10">
                                    <span class="product-count-item  number-increment"> <i class="fas fa-plus"></i></span>
                                </div>
                                <p>$5</p>
                            </div>
                            <div class="add-to-card-btn">
                                <button class="load-more">add to cart</button>
                            </div>
                        </div>
                    </div>

                </div>
            </div>

        </div>
        </div>
    </section>
    <!-- Testomonial slider ends -->
    @await Html.PartialAsync("_SubscribePartial", Model.Subscribe)
